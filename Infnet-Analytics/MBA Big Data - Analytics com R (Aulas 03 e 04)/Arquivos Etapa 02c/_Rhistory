class(x)
View(test)
View(test)
5+5
5+5
10-5
10-20
3*15
43*12.5 #(Atenção com o separador decimal!
14/7
21/45
34/0
plot(1:10)
val_x <- 15
plot(1:val_x)
?plot
help(plot)
View(test)
View(train)
help(plot)
help.search("normal")
library(ggplot2)
library(reshape2)
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
dados <- read.csv("PETR4_VALE5.csv", colClasses=c('myDate','numeric','numeric'),  header = TRUE, sep = ";", dec = ",")
View(dados)
meltdados <- melt(dados,id="Date")
ggplot(meltdados,aes(x=Date,y=value,colour=variable,group=variable)) + geom_line() + theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(dados,aes(x=Date,y=value,colour=variable,group=variable)) + geom_line() + theme(axis.text.x = element_text(angle=90, hjust=1))
meltdados
ggplot(meltdados,aes(x=Date,y=value,colour=variable,group=variable)) + geom_line() + theme(axis.text.x = element_text(angle=90, hjust=1))
Sigma<-matrix(c(10,3,3,2), nrow = 2, ncol = 2) # teste de comentário
mu<-c(1, 10)
x<-mvrnorm(n = 100, mu, Sigma)
library(MASS)
x<-mvrnorm(n = 100, mu, Sigma)
install.packages("dplyr")
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 01")
install.packages(c("ggplot2", "ggthemes", "reshape2"))
library(ggplot2)
library(reshape2)
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y"))
dados <- read.csv("Dados/PETR4_VALE5.csv", colClasses=c('myDate','numeric','numeric'),  header = TRUE, sep= ";", dec = ",")
dados <- read.csv("PETR4_VALE5.csv", colClasses=c('myDate','numeric','numeric'),  header = TRUE, sep= ";", dec = ",")
View(dados)
meltdados <- melt(dados,id="Date")
View(meltdados)
ggplot(meltdados,aes(x=Date,y=value,colour=variable,group=variable)) +
geom_line() +
theme(axis.text.x = element_text(angle=90, hjust=1))
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 02a")
auto <- read.csv("auto-mpg.csv", header=TRUE, sep=",")
View(auto)
names(auto)
auto <- read.csv("auto-mpg-noheader.csv", header=FALSE)
head(auto,2)
auto <- read.csv("auto-mpg-noheader.csv")
head(auto)
auto <- read.csv("auto-mpg-noheader.csv", header=FALSE,
col.names = c("No", "mpg", "cyl", "dis","hp", "wt", "acc", "year", "car_name"))
nome_dataframe <- read.csv("nome_csv.csv", na.strings="")
nome_dataframe <- read.csv("missing-data.csv", na.strings="")
View(nome_dataframe)
install.packages("XML")
install.packages("jsonlite")
apple_colors <- c('green','green','yellow','red','red','red','green')
factor_apple <- factor(apple_colors)
print(factor_apple)
print(nlevels(factor_apple))
table(factor_apple)
x1 <- 10
x2 = 20
assign("x3", 30)
x3 <- c(x1, 2, 3, x2)
x3
x4 <- c("a", "b", "c")
x4
num <- c(522.34, 23, 456)
int <- c(5L, 73L)
compl <- c(10i, 3 + 5i)
txt <- c("aspas duplas", 'aspas simples', "aspas 'dentro' do texto")
logi <- c(TRUE, FALSE, TRUE)
class(num)
class(int)
class(compl)
class(txt)
class(logi)
is.numeric(num)
is.character(num)
is.character(txt)
is.logical(txt)
str(x3)
str(num)
str(int)
str(compl)
str(txt)
str(logi)
num
names(num) <- c("num1","num2","num3")
num
names(num)
num[1] # Primeiro elemento
num[c(1,2)] # Elementos 1 e 2
num[c(1,3)] # Elementos 1 e 3
num[c(3,1,2)] # Alterando a ordem
num["num1"]
num["num2"]
num[c("num1", "num3")]
num[c(TRUE, FALSE, FALSE)]
num[c(FALSE, FALSE, TRUE)]
num[c(TRUE, FALSE, TRUE)]
num
num[1] <- 100
num
num[2:3] <- c(12.3, -10)
num
order(num) # Índices p/ ordenação crescente
num[order(num)] # Ordena o vetor num
sort(num)
1:10
-1:(-10)
seq(from = 1, to = 10, by = 3)
rep(1, times = 10)
rep(c(1,2), times = 5)
1 + 20
c(1,2,3) + c(4,5,6)
200 - 2
c(1,2,3) - c(4,5,6)
200 / 15
c(2,4,6) / c(1,2,3)
2*10
c(10,9,8) * c(1,2,3)
4^2
c(2,2,2) ^ c(1,2,3)
7 %/% 3
c(7,7) %/% c(3,2)
7 %% 3
c(7,7) %% c(3,2)
x <- c(1, 2, 3, 4)
x * 2
x * c(2, 2, 2, 2)
x <- c(1, 2, 3, 4)
x * c(2, 3)
sin(pi) # Seno
cos(pi) # Cosseno
tan(pi) # Tangente, etc.
x <- c(1,2,-3, 4, -20.3)
mean(x) # Média
sum(x) # Somatório
prod(x) # Produtório
cumsum(x) # Somatório acumulado
cumprod(x) # Produtório acumulado
y <- 1:5
var(x) # Variância
sd(x) # Desvio-padrão
median(x) # Mediana
cov(x, y) # Covariância
cor(x, y) # Correlação entre x e y
min(x) # Mínimo
max(x) # Máximo
cummin(x) # Mínimo "acumulado"
cummax(x) # Máximo "acumulado"
diff(x) # Diferença
x <- 10
y <- 20
x == y
x <- c(10, 20, 30)
y <- c(10, 10, 30)
x == y
x[x == y]
x <- c(10, 20)
y <- c("10", "20")
x == y
20 > "100"
identical(x, y)
identical(sin(pi), 0)
identical(0.1, 0.3 - 0.2)
sin(pi) == 0
all.equal(sin(pi), 0)
abs(sin(pi) - 0) < 1e-12
x <- c(1,2,3,4,5)
y <- c("1","3","2","4","5");
resultado <- (x >= y)
resultado
x[resultado]
as.numeric(resultado)
sum(resultado)
c(TRUE, FALSE) & c(TRUE, TRUE)
c(TRUE, FALSE) | c(TRUE, TRUE)
set.seed(11)
x <- rnorm(1000, 5, 2)
any(x > 10)
all(x > -20 & x < 20)
which(c(TRUE, FALSE, TRUE))
which(x > 10)
x <- 1:5
y <- c(1:3, 6:10)
setdiff(x, y)
intersect(x, y)
union(x, y)
x %in% y
Data <- "11 de outubro de 2016"
Data <- as.Date(Data, format="%d de %B de %Y")
str(Data)
Data + 1
Data - 1
weekdays(Data)
Data > "2016-10-01"
months(Data + 31)
quarters(Data)
seq.Date(from = Data, by = 1, length.out = 10L)
Data <- "11 de outubro de 2014 às 19h e 40m"
ct <- as.POSIXct(Data,format="%d de %B de %Y às %Hh e %Mm")
ct
lt <- as.POSIXlt(Data, format="%d de %B de %Y às %Hh e %Mm")
lt
ct + 3600 # Soma uma hora
ct
lt - 60 # Subtrai um minuto
ct
months(ct)
weekdays(lt)
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 02c")
install.packages("ggplot2", dependencies=TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("scatterplot3d", dependencies=TRUE)
install.packages("lattice", dependencies=TRUE)
install.packages("party", dependencies=TRUE)
install.packages("tm", dependencies=TRUE)
install.packages("SnowballC", dependencies=TRUE)
install.packages("wordcloud", dependencies=TRUE)
install.packages("corrplot", dependencies=TRUE)
install.packages("deldir", dependencies=TRUE)
install.packages(c("sp", "maps", "maptools", "mapproj"), dependencies=TRUE)
faltando <- read.csv("missing-data.csv", na.strings="")
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 02a")
faltando <- read.csv("missing-data.csv", na.strings="")
View(faltando)
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 02c")
boxplot(Sepal.Length~Species, data=iris, main="Sepal Length")
boxplot(Sepal.Width~Species, data=iris, main="Sepal Width")
boxplot(Petal.Length~Species, data=iris, main="Petal Length")
boxplot(Petal.Width~Species, data=iris, main="Petal Width")
boxplot(Sepal.Length~Species, data=iris, main="Sepal Length", notch=TRUE)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
plot(density(iris$Sepal.Length))
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 02a")
faltando <- read.csv("missing-data.csv", na.strings="")
View(faltando)
apple_colors <- c('green','green','yellow','red','red','red','green')
factor_apple <- factor(apple_colors)
print(factor_apple)
print(nlevels(factor_apple))
table(factor_apple)
dat <- read.csv("http://www.exploredata.net/ftp/WHO.csv")
View(dat)
library(XML)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
xmldoc <- xmlParse(url)
xmldoc <- xmlParse(url)
xmldoc <- xmlParse(url)
rootNode <- xmlRoot(xmldoc)
url <- "cd_catalog.xml"
xmldoc <- xmlParse(url)
rootNode <- xmlRoot(xmldoc)
rootNode[1]
data <- xmlSApply(rootNode, function(x) xmlSApply(x, xmlValue))
View(data)
catalogo.cd <- data.frame(t(data),row.names=NULL)
View(catalogo.cd)
head(catalogo.cd)
library(jsonlite)
dat.1 <- fromJSON("students.json")
dat.2 <- fromJSON("student-courses.json")
dat.1 <- fromJSON("students.json")
dat.2 <- fromJSON("student-courses.json")
View(dat.1)
View(dat.2)
url <- "http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
jsonDoc <- fromJSON(url)
dat <- jsonDoc$list$resources$resource$fields
View(dat)
head(dat)
head(dat.1)
head(dat.2)
x1 <- 10
x2 = 20
assign("x3", 30)
x3 <- c(x1, 2, 3, x2)
x3
x4 <- c("a", "b", "c")
x4
num <- c(522.34, 23, 456)
int <- c(5L, 73L)
compl <- c(10i, 3 + 5i)
txt <- c("aspas duplas", 'aspas simples', "aspas 'dentro' do texto")
logi <- c(TRUE, FALSE, TRUE)
class(num)
class(int)
class(compl)
class(txt)
class(logi)
is.numeric(num)
is.character(num)
is.character(txt)
is.logical(txt)
str(x3)
str(num)
str(int)
str(compl)
str(txt)
str(logi)
num
num
names(num) <- c("num1","num2","num3")
num
names(num)
num[1] # Primeiro elemento
num[c(1,2)] # Elementos 1 e 2
num[c(1,3)] # Elementos 1 e 3
num[c(3,1,2)] # Alterando a ordem
num["num1"]
num["num2"]
num[c("num1", "num3")]
num[c(TRUE, FALSE, FALSE)]
num[c(FALSE, FALSE, TRUE)]
num[c(TRUE, FALSE, TRUE)]
num
num
num[1] <- 100
num
num[2:3] <- c(12.3, -10)
num
order(num) # Índices p/ ordenação crescente
num[order(num)] # Ordena o vetor num
sort(num)
1:10
1:100
-1:(-10)
-1:(-10)
seq(from = 1, to = 10, by = 3)
rep(1, times = 10)
rep(c(1,2), times = 5)
1 + 20
c(1,2,3) + c(4,5,6)
200 - 2
c(1,2,3) - c(4,5,6)
200 / 15
c(2,4,6) / c(1,2,3)
2*10
c(10,9,8) * c(1,2,3)
4^2
c(2,2,2) ^ c(1,2,3)
7 %/% 3
c(7,7) %/% c(3,2)
7 %% 3
c(7,7) %% c(3,2)
x <- c(1, 2, 3, 4)
x * 2
x * c(2, 2, 2, 2)
x <- c(1, 2, 3, 4)
x * c(2, 3)
x * c(2, 3, 2, 3)
x * c(2, 3, 1)
x <- c(1,2,-3, 4, -20.3)
abs(x) # Valor absoluto
log(x) # Logaritmo natural
exp(x) # Exponencial
sqrt(x) #Raiz quadrada
factorial(1000) # Fatorial (5*4*3*2*1)
factorial(5) # Fatorial (5*4*3*2*1)
factorial(10) # Fatorial (5*4*3*2*1)
factorial(100) # Fatorial (5*4*3*2*1)
factorial(1000) # Fatorial (5*4*3*2*1)
sin(pi) # Seno
cos(pi) # Cosseno
tan(pi) # Tangente, etc.
x <- c(1,2,-3, 4, -20.3)
mean(x) # Média
sum(x) # Somatório
prod(x) # Produtório
cumsum(x) # Somatório acumulado
cumprod(x) # Produtório acumulado
y <- 1:5
var(x) # Variância
sd(x) # Desvio-padrão
median(x) # Mediana
cov(x, y) # Covariância
cor(x, y) # Correlação entre x e y
min(x) # Mínimo
max(x) # Máximo
cummin(x) # Mínimo "acumulado"
cummax(x) # Máximo "acumulado"
diff(x) # Diferença
x <- 10
y <- 20
x == y
x <- c(10, 20, 30)
y <- c(10, 10, 30)
x == y
x[x == y]
x <- c(10, 20)
y <- c("10", "20")
x == y
20 > "100"
identical(x, y)
identical(sin(pi), 0)
identical(0.1, 0.3 - 0.2)
sin(pi) == 0
all.equal(sin(pi), 0)
abs(sin(pi) - 0) < 1e-12
x <- c(1,2,3,4,5)
y <- c("1","3","2","4","5");
resultado <- (x >= y)
resultado
x[resultado]
as.numeric(resultado)
sum(resultado)
set.seed(11)
x <- rnorm(1000, 5, 2)
any(x > 10)
all(x > -20 & x < 20)
which(c(TRUE, FALSE, TRUE))
which(x > 10)
setwd("D:/Dropbox/01 - Infnet/73 - Big Data Analytics (MBA)/Aulas/Arquivos Etapa 02c")
boxplot(Sepal.Length~Species, data=iris, main="Sepal Length")
boxplot(Sepal.Width~Species, data=iris, main="Sepal Width")
boxplot(Petal.Length~Species, data=iris, main="Petal Length")
boxplot(Petal.Width~Species, data=iris, main="Petal Width")
boxplot(Sepal.Length~Species, data=iris, main="Sepal Length", notch=TRUE)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
plot(density(iris$Sepal.Length))
plot(density(iris$Sepal.Width))
plot(density(iris$Petal.Length))
plot(density(iris$Petal.Width))
panel.pearson <- function(x, y, ...) {
horizontal <- (par("usr")[1] + par("usr")[2]) / 2;
vertical <- (par("usr")[3] + par("usr")[4]) / 2;
text(horizontal, vertical, format(abs(cor(x,y)), digits=2))
}
pairs(iris[1:4], main="Iris Dataset com Correlações", pch=21, bg=c("red","green3","blue")[unclass(iris$Species)], upper.panel=panel.pearson)
panel.corprop <- function(x, y, ...)
{
par(usr = c(0, 1, 0, 1))
txt <- as.character(format(cor(x, y), digits=2))
text(0.5, 0.5, txt, cex = 6* abs(cor(x, y)))
}
pairs(iris[1:4], main="Iris Dataset com Correlações de Tamanho Proporcional", pch=21, bg=c("red","green3","blue")[unclass(iris$Species)], upper.panel=panel.corprop)
pairs(iris[1:4], main="Iris Dataset com Etiquetas", pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],lower.panel=NULL,labels=c("SL","SW","PL","PW"),font.labels=2,cex.labels=4.5)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(iris[1:4], main="Iris Dataset com Histogramas", pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)],
diag.panel = panel.hist)
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "black", ...)
{
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(stats::lm(y ~ x), col = col.smooth, ...)
}
pairs(iris[1:4], main="Iris Dataset com Diversas Informações", pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)],
upper.panel=panel.corprop,
diag.panel = panel.hist,
lower.panel = panel.lm)
library(corrplot)
iriscor <- cor(iris[1:4])
round(iriscor, digits=2)
corrplot(iriscor)
corrplot(iriscor, method="shade", shade.col=NA, tl.col="black", tl.srt=45)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(iriscor, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(200), addCoef.col="black", addcolorlabel="no", order="AOE")
filled.contour(volcano, color=terrain.colors,
asp=1, plot.axes=contour(volcano, add=T))
persp(volcano, theta=25, phi=30, expand=0.5, col="lightblue")
library(ggplot2)
qplot(Sepal.Length, Sepal.Width, data=iris, facets=Species ~.)
library(tm)
library(SnowballC)
library(wordcloud)
load("Wordcloud.RData")
View(jeopQ)
wordcloud(jeopCorpus, max.words = 100, random.order = FALSE,
colors = brewer.pal(8,"Spectral"))
airports <- read.csv("airport-locations.tsv", sep="\t", stringsAsFactors=FALSE)
source("latlong2state.R")
airports$state <- latlong2state(airports[,c("longitude", "latitude")])
airports_contig <- na.omit(airports)
library(mapproj)
airports_projected <- mapproject(airports_contig$longitude, airports_contig$latitude,
"albers", param=c(39,45))
par(mar=c(0,0,0,0))
plot(airports_projected, asp=1, type="n", bty="n", xlab="", ylab="", axes=FALSE)
points(airports_projected, pch=20, cex=0.1, col="red")
library(deldir)
vtess <- deldir(airports_projected$x, airports_projected$y)
plot(vtess, wlines="tess", wpoints="none", number=FALSE, add=TRUE, lty=1)
